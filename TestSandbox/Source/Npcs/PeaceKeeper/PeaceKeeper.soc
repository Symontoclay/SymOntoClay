{: { enemy($x) } -> { soldier($x) } :}

app PeaceKeeper
{
    //idle actions
    //{
    //    go();
    //}
	
	on Enter =>
    {
        'Begin' >> @>log;

        go();

        'End' >> @>log;
    }
	
    //on {: see(I, $_) & enemy($_) & state($_, alive) :} => 
	//{
	//    'see(I, $_) & enemy($_) & state($_, alive)' >> @>log;
		//weak cancel action;
	//}

	//on {: see(I, $_) & state($_, alive) :} => 
	//{
	//    'see(I, $_) & state($_, alive)' >> @>log;
		//weak cancel action;
	//}

	//on {: see(I, $_) :} => 
	//{
	//    'see(I, $_)' >> @>log;
		//weak cancel action;
	//}

	fun go()
    {
	    'Begin go' >> @>log;
		`move and check`(#@(waypoint & random));
		//@@host.go(to: #@(waypoint));
        //@@host.go(to: #@(waypoint & random));
		//@@host.go(to: #WP_43);
		'End go' >> @>log;
    }
}

action `move and check`
{
    op (@target)
	{
	    'Begin move and check' >> @>log;

	    repeat
		{
		    //@@host.go(to: @target)[: timeout = 1200, on completed {'on completed move' >> @>log; complete action;} :];
		    move(@target)[: timeout = 1200, on complete { 'on complete move' >> @>log; complete action;}, on weak canceled { 'on weak canceled move and check (move)' >> @>log; } :];
			check();
		}

		'End move and check' >> @>log;
	}

	on {: see(I, $_) & enemy($_) & state($_, alive) :} => 
	{
	    'see(I, $_) & enemy($_) & state($_, alive)' >> @>log;
		weak cancel action;
	}

    //on {: see(I, $_) :} => 
	//{
	//    'see(I, $_)' >> @>log;
		//weak cancel action;
	//}
}

action check
{
    op ()
	{
	    'Begin check' >> @>log;
	    @@host.`stop`();
	    @@host.`rotate`(30);
		@@host.`rotate`(-60);
		@@host.`rotate`(30);
		'End check' >> @>log;
	}
}

action move
{		
	op (@target)
	{
	    'Begin move' >> @>log;
		@@host.go(to: @target) [: on weak canceled { 'on weak canceled move (host)' >> @>log; complete action; }, on complete { 'on complete move (host)' >> @>log; complete action;} :];
		'End move' >> @>log;
	}
}

action kill
{
    op (@target)
	{
	    'Begin kill' >> @>log;
	}

	fun aim()
	{
	
	}

	fun shoot()
	{
	
	}

	fun `stop shoot`()
	{
	
	}

	fun `ready for shoot`()
	{
	    
	}
}