using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SymOntoClay.SourceGenerator
{
    public class SocSerializationGeneration
    {
        public SocSerializationGeneration(GeneratorExecutionContext context)
        {
            _context = context;
        }

        private readonly GeneratorExecutionContext _context;
        
        public void Run(TargetCompilationUnit targetCompilationUnit, PlainObjectsRegistry plainObjectsRegistry)
        {
            var availableNamespaces = targetCompilationUnit.Usings.Select(p => GeneratorsHelper.ExtractNamespaceNameFromUsing(p)).Where(p => !string.IsNullOrWhiteSpace(p)).Distinct().ToList();

            var requredNamespaces = new List<string>()
            {
                "using System.Text;",
                "using System;",
                "using SymOntoClay.Common;",
                "using SymOntoClay.Common.DebugHelpers;",
                "using SymOntoClay.Serialization;"
            };

            if(targetCompilationUnit.Usings?.Any() ?? false)
            {
                requredNamespaces.AddRange(targetCompilationUnit.Usings);
            }

            var sourceCodeBuilder = new StringBuilder();
            sourceCodeBuilder.AppendLine("// <autogenerated />");
            foreach(var item in requredNamespaces.Distinct())
            {
                sourceCodeBuilder.AppendLine(item);
            }
            
            foreach (var targetClassItem in targetCompilationUnit.ClassItems)
            {
                ProcessTargetClassItem(targetClassItem, sourceCodeBuilder, plainObjectsRegistry, availableNamespaces);
            }

            var firstClassItem = targetCompilationUnit.ClassItems.First();

            var fileName = $"{firstClassItem.Namespace}.{firstClassItem.Identifier}.g.cs";

            SaveFile(sourceCodeBuilder.ToString(), fileName);
        }

        private void ProcessTargetClassItem(TargetClassItem targetClassItem, StringBuilder sourceCodeBuilder, PlainObjectsRegistry plainObjectsRegistry, List<string> availableNamespaces)
        {
            var availableNamespacesForClass = availableNamespaces
                .Concat(new List<string> { targetClassItem.Namespace })
                .Distinct()
                .ToList();

            var identationStep = 4;
            var baseIdentation = 0;
            var classDeclIdentation = baseIdentation + identationStep;
            var classContentDeclIdentation = classDeclIdentation + identationStep;
            var classContentIdentation = classContentDeclIdentation + identationStep;

            var baseTypeInfo = GetBaseTypeInfo(targetClassItem.SyntaxNode);

            var baseTypeName = baseTypeInfo.TypeName;

            var hasBaseType = !string.IsNullOrWhiteSpace(baseTypeName);

            var plainObjectClassName = GeneratorsHelper.GetPlainObjectClassIdentifier(targetClassItem.SyntaxNode);

            var propertyItems = GetPropertyItems(targetClassItem.SyntaxNode);

            var fieldsItems = GetFieldItems(targetClassItem.SyntaxNode);

            var actionKeyName = string.Empty;

            var propertyActionKey = propertyItems.FirstOrDefault(p => p.IsActionKey);

            if (propertyActionKey == null)
            {
                var fieldActionKey = fieldsItems.FirstOrDefault(p => p.IsActionKey);

                if (fieldActionKey != null)
                {
                    actionKeyName = fieldActionKey.Identifier;
                }
            }
            else
            {
                actionKeyName = propertyActionKey.Identifier;
            }

            var memberModifierMark = hasBaseType ? "override" : "virtual";

            var plainObjectBaseType = string.Empty;

            if (hasBaseType)
            {
                plainObjectBaseType = GetPlainObjectClassIdentifierFromAttribute(targetClassItem.SyntaxNode);

                if (string.IsNullOrWhiteSpace(plainObjectBaseType))
                {
                    var peparedBaseType = baseTypeName.Contains('<') ? baseTypeName.Substring(0, baseTypeName.IndexOf('<')).Trim() : baseTypeName;

                    plainObjectBaseType = plainObjectsRegistry.Get(availableNamespacesForClass, peparedBaseType, baseTypeInfo.GenericPrametersCount);

                    if(string.IsNullOrWhiteSpace(plainObjectBaseType))
                    {
                        plainObjectBaseType = GetPlainObjectClassIdentifier(baseTypeName);
                    }                    
                }
            }

            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"namespace {targetClassItem.Namespace}.PlainObjects");
            sourceCodeBuilder.AppendLine("{");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classDeclIdentation)}public partial class {plainObjectClassName}: {(hasBaseType ? $" {plainObjectBaseType}, " : string.Empty)}IObjectToString");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classDeclIdentation)}{{");
            foreach (var propertyItem in propertyItems)
            {
                if (propertyItem.IsActionOrFunc)
                {
                    continue;
                }

                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}public {GetBaseFieldMemberType(propertyItem)} {propertyItem.Identifier} {{ get; set; }}");
            }
            foreach (var fieldItem in fieldsItems)
            {
                if (fieldItem.IsActionOrFunc)
                {
                    continue;
                }

                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}public {GetBaseFieldMemberType(fieldItem)} {fieldItem.Identifier};");
            }

            if(!hasBaseType)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}/// <inheritdoc/>");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}public override string ToString()");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}return ToString(0u);");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}/// <inheritdoc/>");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}public string ToString(uint n)");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}return this.GetDefaultToStringInformation(n);");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}/// <inheritdoc/>");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}string IObjectToString.PropertiesToString(uint n)");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}return PropertiesToString(n);");
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            }

            if(hasBaseType)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}/// <inheritdoc/>");
            }

            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}protected {(hasBaseType ? "override" : "virtual")} string PropertiesToString(uint n)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}var spaces = DisplayHelper.Spaces(n);");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}var sb = new StringBuilder();");
            foreach (var propertyItem in propertyItems)
            {
                if (propertyItem.IsActionOrFunc)
                {
                    continue;
                }

                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}sb.AppendLine($\"{{spaces}}{{nameof({propertyItem.Identifier})}} = {{{propertyItem.Identifier}}}\");");
            }
            foreach (var fieldItem in fieldsItems)
            {
                if (fieldItem.IsActionOrFunc)
                {
                    continue;
                }

                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}sb.AppendLine($\"{{spaces}}{{nameof({fieldItem.Identifier})}} = {{{fieldItem.Identifier}}}\");");
            }

            if(hasBaseType)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}sb.Append(base.PropertiesToString(n));");
            }

            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}return sb.ToString();");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine("}");
            sourceCodeBuilder.AppendLine();

            var hasConstructorWithoutParameters = HasConstructorWithoutParameters(targetClassItem.SyntaxNode);

            var classIdentifier = GetClassIdentifier(targetClassItem.SyntaxNode);

            var postDeserializationMethodName = GetPostDeserializationMethod(targetClassItem.SyntaxNode);

            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"namespace {targetClassItem.Namespace}");
            sourceCodeBuilder.AppendLine("{");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classDeclIdentation)}public partial class {classIdentifier}: ISerializable");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classDeclIdentation)}{{");

            if (!hasConstructorWithoutParameters)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}public {GetClassIdentifierWithoutGenericParams(targetClassItem.SyntaxNode)}(){{}}");
                sourceCodeBuilder.AppendLine();
            }

            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}Type ISerializable.GetPlainObjectType() => GetPlainObjectType();");
            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}protected {memberModifierMark} Type GetPlainObjectType() => typeof(PlainObjects.{plainObjectClassName});");
            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}void ISerializable.OnWritePlainObject(object plainObject, ISerializer serializer)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}OnWritePlainObject(plainObject, serializer);");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine();

            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}protected {memberModifierMark} void OnWritePlainObject(object plainObject, ISerializer serializer)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
            if (hasBaseType)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}base.OnWritePlainObject(plainObject, serializer);");
            }
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}OnWritePlainObject((PlainObjects.{plainObjectClassName})plainObject, serializer);");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine();

            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}private void OnWritePlainObject(PlainObjects.{plainObjectClassName} plainObject, ISerializer serializer)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
            foreach (var propertyItem in propertyItems)
            {
                if (propertyItem.IsActionOrFunc)
                {
                    continue;
                }

                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}{CreateWriteProperty(propertyItem)}");
            }
            foreach (var fieldItem in fieldsItems)
            {
                if (fieldItem.IsActionOrFunc)
                {
                    continue;
                }

                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}{CreateWriteField(fieldItem)}");
            }
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}void ISerializable.OnReadPlainObject(object plainObject, IDeserializer deserializer)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}OnReadPlainObject(plainObject, deserializer);");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}protected {memberModifierMark} void OnReadPlainObject(object plainObject, IDeserializer deserializer)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");
            if (hasBaseType)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}base.OnReadPlainObject(plainObject, deserializer);");
            }
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}OnReadPlainObject((PlainObjects.{plainObjectClassName})plainObject, deserializer);");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}private void OnReadPlainObject(PlainObjects.{plainObjectClassName} plainObject, IDeserializer deserializer)");
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}{{");

            var actionIndex = 0;

            foreach (var propertyItem in propertyItems)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}{CreateReadProperty(propertyItem, actionKeyName, ref actionIndex)}");
            }
            foreach (var fieldItem in fieldsItems)
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}{CreateReadField(fieldItem, actionKeyName, ref actionIndex)}");
            }

            if (!string.IsNullOrWhiteSpace(postDeserializationMethodName))
            {
                sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentIdentation)}{postDeserializationMethodName}();");
            }

            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classContentDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine();
            sourceCodeBuilder.AppendLine($"{GeneratorsHelper.Spaces(classDeclIdentation)}}}");
            sourceCodeBuilder.AppendLine("}");
        }

        private bool HasConstructorWithoutParameters(ClassDeclarationSyntax syntaxNode)
        {
            var constructorDeclarations = syntaxNode.ChildNodes().OfType<ConstructorDeclarationSyntax>();

            if (constructorDeclarations.Count() == 0)
            {
                return true;
            }

            return constructorDeclarations.Any(p => p.ParameterList.Parameters.Count == 0);
        }

        private string GetPostDeserializationMethod(ClassDeclarationSyntax syntaxNode)
        {
            var postDeserializationMethodNode = syntaxNode.
                ChildNodes()
                ?.OfType<MethodDeclarationSyntax>()
                ?.Where(p => p.ChildNodes()?.OfType<AttributeListSyntax>()?.Any(x => x.Attributes.Any(y => GeneratorsHelper.ToString(y.Name.GetText()) == Constants.SocPostDeserializationMethodAttributeName)) ?? false)
                ?.FirstOrDefault();

            if (postDeserializationMethodNode == null)
            {
                return string.Empty;
            }

            return postDeserializationMethodNode.Identifier.Text;
        }

        private string GetBaseFieldMemberType(BaseFieldItem baseFieldItem)
        {
            if (baseFieldItem.KindFieldType == KindFieldType.PredefinedType)
            {
                return GeneratorsHelper.ToString(baseFieldItem.FieldTypeSyntaxNode.GetText());
            }
            else
            {
                return "ObjectPtr";
            }
        }

        private string GetClassIdentifier(ClassDeclarationSyntax syntaxNode)
        {
            var sb = new StringBuilder(syntaxNode.Identifier.Text);

            var typeParameterList = syntaxNode?.ChildNodes().FirstOrDefault(p => p.IsKind(SyntaxKind.TypeParameterList));

            if (typeParameterList != null)
            {
                sb.Append(GeneratorsHelper.ToString(typeParameterList.GetText()));
            }

            return sb.ToString();
        }

        private string GetClassIdentifierWithoutGenericParams(ClassDeclarationSyntax syntaxNode)
        {
            return syntaxNode.Identifier.Text;
        }

        private string GetPlainObjectClassIdentifierFromAttribute(ClassDeclarationSyntax syntaxNode)
        {
            var socBasePlainObjectAttribute = syntaxNode
                ?.ChildNodes()
                ?.OfType<AttributeListSyntax>()
                ?.SelectMany(p => p.ChildNodes()?.OfType<AttributeSyntax>().Where(x => x.ChildNodes()?.OfType<IdentifierNameSyntax>()?.Any(y => GeneratorsHelper.ToString(y.GetText()) == Constants.SocBasePlainObjectAttributeName) ?? false))
                ?.FirstOrDefault();

            if (socBasePlainObjectAttribute == null)
            {
                return string.Empty;
            }

            var socBasePlainObjectArgument = socBasePlainObjectAttribute.ChildNodes()?.OfType<AttributeArgumentListSyntax>()?.SelectMany(p => p.ChildNodes()?.OfType<AttributeArgumentSyntax>())?.FirstOrDefault();

            if (socBasePlainObjectArgument == null)
            {
                return string.Empty;
            }

            var socBasePlainObjectNameNode = socBasePlainObjectArgument.ChildNodes()?.OfType<LiteralExpressionSyntax>().FirstOrDefault();

            if (socBasePlainObjectNameNode != null)
            {
                return GeneratorsHelper.ToString(socBasePlainObjectNameNode.GetText()).Replace("\"", string.Empty).Trim();
            }

            var socBasePlainObjectNameOfNode = socBasePlainObjectArgument
                .ChildNodes()
                ?.OfType<InvocationExpressionSyntax>()
                ?.SelectMany(x => x.ChildNodes()?.OfType<ArgumentListSyntax>().SelectMany(y => y.ChildNodes()?.OfType<ArgumentSyntax>()?.SelectMany(n => n.ChildNodes()?.OfType<IdentifierNameSyntax>())))
                .FirstOrDefault();

            if (socBasePlainObjectNameOfNode == null)
            {
                return string.Empty;
            }

            return GeneratorsHelper.ToString(socBasePlainObjectNameOfNode.GetText()).Trim();
        }

        private string GetPlainObjectClassIdentifier(string typeName)
        {
            if (string.IsNullOrWhiteSpace(typeName))
            {
                return string.Empty;
            }

            var typeNameWithoutSpaces = typeName.Replace(" ", string.Empty);

            var typeNameWithPo = string.Empty;

            if (typeNameWithoutSpaces.Contains("<"))
            {
                typeNameWithPo = typeNameWithoutSpaces.Insert(typeNameWithoutSpaces.IndexOf("<"), "Po");
            }
            else
            {
                typeNameWithPo = $"{typeNameWithoutSpaces}Po";
            }

            return typeNameWithPo.Replace("<", "_").Replace(",", "_").Replace(">", string.Empty);
        }

        private (string TypeName, int GenericPrametersCount) GetBaseTypeInfo(SyntaxNode syntaxNode)
        {
            var attributesList = GeneratorsHelper.GetAtributeNamesOfClass(syntaxNode);

            if (attributesList.Contains(Constants.BasedOnSocNoSerializableAttributeName))
            {
                return (string.Empty, 0);
            }

            var baseListNode = syntaxNode?.ChildNodes()?.OfType<BaseListSyntax>()?.FirstOrDefault();

            if (baseListNode == null)
            {
                return (string.Empty, 0);
            }

            var baseTypeList = baseListNode.ChildNodes().OfType<SimpleBaseTypeSyntax>();

            foreach (var baseType in baseTypeList)
            {
                var typeName = GeneratorsHelper.ToString(baseType.GetText());

                if (!IsSerializedBaseTypeName(typeName))
                {
                    continue;
                }

                var typeParameterList = baseType?.ChildNodes()?.OfType<GenericNameSyntax>()?.SelectMany(p => p?.ChildNodes().OfType<TypeArgumentListSyntax>()).FirstOrDefault();

                return (typeName, typeParameterList?.ChildNodes()?.Count() ?? 0);
            }

            return (string.Empty, 0);
        }

        private bool IsSerializedBaseTypeName(string name)
        {
            if (name.ToLower() == "object")
            {
                return false;
            }

            if (name[0] == 'I' && name.Length > 1 && char.IsUpper(name[1]))
            {
                return false;
            }

            return true;
        }

        private string GetTypeName(BaseFieldItem baseFieldItem)
        {
            return GetTypeName(baseFieldItem.FieldTypeSyntaxNode);
        }

        private string GetTypeName(SyntaxNode syntaxNode)
        {
            return GeneratorsHelper.ToString(syntaxNode.GetText()); ;
        }

        private List<PropertyItem> GetPropertyItems(ClassDeclarationSyntax syntaxNode)
        {
            var result = new List<PropertyItem>();

            var propertiesDeclarationsList = syntaxNode.ChildNodes()?.Where(p => p.IsKind(SyntaxKind.PropertyDeclaration) && IsSerializedProperty(p)).OfType<PropertyDeclarationSyntax>() ?? new List<PropertyDeclarationSyntax>();

            if (propertiesDeclarationsList.Count() == 0)
            {
                return result;
            }

            foreach (var propertyDeclaration in propertiesDeclarationsList)
            {
                var hasNoSerializableMemberAttribute = HasNoSerializableMemberAttribute(propertyDeclaration);

                if (hasNoSerializableMemberAttribute)
                {
                    continue;
                }

                var hasActionKeyAttribute = HasActionKeyAttribute(propertyDeclaration);

                var item = new PropertyItem()
                {
                    ClassDeclarationSyntaxNode = syntaxNode,
                    SyntaxNode = propertyDeclaration,
                    IsActionKey = hasActionKeyAttribute
                };

                FillUpBaseFieldItem(propertyDeclaration, item);

                result.Add(item);
            }

            return result;
        }

        private static bool IsSerializedProperty(SyntaxNode propertyDeclarationNode)
        {
            var accessorList = propertyDeclarationNode.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.AccessorList));

            if (accessorList == null)
            {
                return false;
            }

            var getAccessorDeclaration = accessorList.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.GetAccessorDeclaration));

            if ((getAccessorDeclaration?.ChildNodes()?.Count() ?? 0) > 0)
            {
                return false;
            }

            var setAccessorDeclaration = accessorList.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.SetAccessorDeclaration));

            if ((setAccessorDeclaration?.ChildNodes()?.Count() ?? 0) > 0)
            {
                return false;
            }

            return true;
        }

        private List<FieldItem> GetFieldItems(ClassDeclarationSyntax syntaxNode)
        {
            var result = new List<FieldItem>();

            var fieldsDeclarationList = syntaxNode.ChildNodes()?.Where(p => p.IsKind(SyntaxKind.FieldDeclaration)).OfType<FieldDeclarationSyntax>() ?? new List<FieldDeclarationSyntax>();

            if (fieldsDeclarationList.Count() == 0)
            {
                return result;
            }

            foreach (var fieldDeclaration in fieldsDeclarationList)
            {
                var hasNoSerializableMemberAttribute = HasNoSerializableMemberAttribute(fieldDeclaration);

                if (hasNoSerializableMemberAttribute)
                {
                    continue;
                }

                var hasActionKeyAttribute = HasActionKeyAttribute(fieldDeclaration);

                var item = new FieldItem()
                {
                    ClassDeclarationSyntaxNode = syntaxNode,
                    SyntaxNode = fieldDeclaration,
                    IsActionKey = hasActionKeyAttribute
                };

                var variableDeclaration = fieldDeclaration.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.VariableDeclaration));

                FillUpBaseFieldItem(variableDeclaration, item);

                result.Add(item);
            }

            return result;
        }

        private bool HasNoSerializableMemberAttribute(SyntaxNode syntaxNode)
        {
            return HasMemberAttribute(syntaxNode, Constants.NoSerializableMemberAttributeName);
        }

        private bool HasActionKeyAttribute(SyntaxNode syntaxNode)
        {
            return HasMemberAttribute(syntaxNode, Constants.SerializableActionKeyAttributeName);
        }

        private bool HasMemberAttribute(SyntaxNode syntaxNode, string attributeName)
        {
            return syntaxNode.ChildNodes().OfType<AttributeListSyntax>().Any(p => p.ChildNodes().OfType<AttributeSyntax>().Any(x => x.ChildNodes().OfType<IdentifierNameSyntax>().Any(y => y.Identifier.Text == attributeName)));
        }

        private void FillUpBaseFieldItem(SyntaxNode syntaxNode, BaseFieldItem baseFieldItem)
        {
            var predefinedType = syntaxNode.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.PredefinedType));

            if (predefinedType == null)
            {
                var identifierName = syntaxNode.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.IdentifierName));

                if (identifierName == null)
                {
                    var genericName = syntaxNode.ChildNodes()?.FirstOrDefault(p => p.IsKind(SyntaxKind.GenericName));

                    if (genericName == null)
                    {
                        throw new NotImplementedException("8E504D11-8586-4B60-832C-D890CFD7D10D");
                    }
                    else
                    {
                        baseFieldItem.FieldTypeSyntaxNode = genericName;
                        baseFieldItem.KindFieldType = KindFieldType.GenericType;
                    }
                }
                else
                {
                    baseFieldItem.FieldTypeSyntaxNode = identifierName;
                    baseFieldItem.KindFieldType = KindFieldType.Identifier;
                }
            }
            else
            {
                baseFieldItem.FieldTypeSyntaxNode = predefinedType;

                var typeName = GeneratorsHelper.ToString(predefinedType.GetText());

                if (typeName == "object")
                {
                    baseFieldItem.KindFieldType = KindFieldType.Object;
                }
                else
                {
                    baseFieldItem.KindFieldType = KindFieldType.PredefinedType;
                }
            }

            baseFieldItem.IsActionOrFunc = IsActionOrFunc(baseFieldItem);
        }

        private bool IsActionOrFunc(BaseFieldItem baseFieldItem)
        {
            var typeName = GetTypeName(baseFieldItem).Replace(" ", string.Empty).Trim();

            return typeName == "Action" || typeName.StartsWith("Action<") || typeName.StartsWith("Func<");
        }

        private string CreateWriteProperty(PropertyItem propertyItem)
        {
            return CreateWriteMember(propertyItem);
        }

        private string CreateWriteField(FieldItem fieldItem)
        {
            return CreateWriteMember(fieldItem);
        }

        private string CreateWriteMember(BaseFieldItem baseFieldItem)
        {
            var memberIdentifier = baseFieldItem.Identifier;

            var sb = new StringBuilder("plainObject.");
            sb.Append(memberIdentifier);
            sb.Append(" = ");
            switch (baseFieldItem.KindFieldType)
            {
                case KindFieldType.PredefinedType:
                    sb.Append(memberIdentifier);
                    break;

                default:
                    sb.Append($"serializer.GetSerializedObjectPtr({memberIdentifier})");
                    break;
            }
            sb.Append(";");

            return sb.ToString();
        }

        private string CreateReadProperty(PropertyItem propertyItem, string actionKeyName, ref int actionIndex)
        {
            return CreateReadMember(propertyItem, actionKeyName, ref actionIndex);
        }

        private string CreateReadField(FieldItem fieldItem, string actionKeyName, ref int actionIndex)
        {
            return CreateReadMember(fieldItem, actionKeyName, ref actionIndex);
        }

        private string CreateReadMember(BaseFieldItem baseFieldItem, string actionKeyName, ref int actionIndex)
        {
            var memberIdentifier = baseFieldItem.Identifier;

            var sb = new StringBuilder();
            sb.Append(memberIdentifier);
            sb.Append(" = ");

            switch (baseFieldItem.KindFieldType)
            {
                case KindFieldType.PredefinedType:
                    sb.Append("plainObject.");
                    sb.Append(memberIdentifier);
                    break;

                default:
                    {
                        var typeName = GetTypeName(baseFieldItem);

                        if (baseFieldItem.IsActionOrFunc)
                        {
                            sb.Append($"deserializer.GetAction<{typeName}>(plainObject.{actionKeyName}, {actionIndex})");
                            actionIndex++;

                            break;
                        }

                        sb.Append($"deserializer.GetDeserializedObject<{typeName}>(plainObject.{memberIdentifier})");
                    }
                    break;
            }
            sb.Append(";");
            return sb.ToString();
        }

        private void SaveFile(string source, string fileName)
        {
            _context.AddSource(fileName, SourceText.From(source, Encoding.UTF8));
        }
    }
}
