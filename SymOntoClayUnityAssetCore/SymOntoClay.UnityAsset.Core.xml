<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SymOntoClay.UnityAsset.Core</name>
    </assembly>
    <members>
        <member name="P:SymOntoClay.UnityAsset.Core.BaseGameComponentSettings.Id">
            <summary>
            Gets or sets unique Id.
            It allows us to identify each item of the game.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BaseGameComponentSettings.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BaseGameComponentSettings.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BaseGameComponentSettings.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.BaseManualControllingGameComponentSettings.HostListener">
            <summary>
            Gets or sets host listener.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BaseManualControllingGameComponentSettings.PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.BaseStoredGameComponentSettings.HostFile">
            <summary>
            Gets or sets file name of SymOntoClay host file.
            The file describes facts which are visible for other NPCs or can be recognized in some way by player.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BaseStoredGameComponentSettings.PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute">
            <summary>
            Marks C# method as external method for SymOntoClay DSL.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor">
            <summary>
            Initializes a new instance of the class with default properties.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="useMainThread"><b>true</b> if marked method requires calling in the main thread only. <b>false</b> if the marked method can be called in any thread.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(SymOntoClay.UnityAsset.Core.DeviceOfBiped[])">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="devices">Describes parts of body which will be used during execution of the marked method.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(System.Boolean,SymOntoClay.UnityAsset.Core.DeviceOfBiped[])">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="useMainThread"><b>true</b> if marked method requires calling in the main thread only. <b>false</b> if the marked method can be called in any thread.</param>
            <param name="devices">Describes parts of body which will be used during execution of the marked method.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="methodName">Alias of the marked method in SymOntoClay DSL.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="methodName"></param>
            <param name="useMainThread"><b>true</b> if marked method requires calling in the main thread only. <b>false</b> if the marked method can be called in any thread.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(System.String,SymOntoClay.UnityAsset.Core.DeviceOfBiped[])">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="methodName">Alias of the marked method in SymOntoClay DSL.</param>
            <param name="devices">Describes parts of body which will be used during execution of the marked method.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.BipedEndpointAttribute.#ctor(System.String,System.Boolean,SymOntoClay.UnityAsset.Core.DeviceOfBiped[])">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="methodName">Alias of the marked method in SymOntoClay DSL.</param>
            <param name="useMainThread"><b>true</b> if marked method requires calling in the main thread only. <b>false</b> if the marked method can be called in any thread.</param>
            <param name="devices">Describes parts of body which will be used during execution of the marked method.</param>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.DeviceOfBiped">
            <summary>
            Represents part of body of the NPC or Player which are required for doing actions or using things (game objects). 
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.DeviceOfBiped.Head">
            <summary>
            Represents the head of the NPC or Player.
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.DeviceOfBiped.RightHand">
            <summary>
            Represents the right hand of the NPC or Player.
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.DeviceOfBiped.LeftHand">
            <summary>
            Represents the left hand of the NPC or Player.
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.DeviceOfBiped.RightLeg">
            <summary>
            Represents the right leg of the NPC or Player.
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.DeviceOfBiped.LeftLeg">
            <summary>
            Represents the left leg of the NPC or Player.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.EndpointParamAttribute">
            <summary>
            Marks parameter of C# external method for SymOntoClay DSL.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.EndpointParamAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">Alias of the marked parameter in SymOntoClay DSL.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.EndpointParamAttribute.#ctor(SymOntoClay.UnityAsset.Core.KindOfEndpointParam)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="kindOfParameter">Describes a tip about conversion between C# and SymOntoclay DSL types.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.EndpointParamAttribute.#ctor(System.String,SymOntoClay.UnityAsset.Core.KindOfEndpointParam)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">Alias of the marked parameter in SymOntoClay DSL.</param>
            <param name="kindOfParameter">Describes a tip about conversion between C# and SymOntoclay DSL types.</param>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.FriendsEndpointsAttribute">
            <summary>
            Marks C# method as friends for marked method.
            Both friends methods and marked method should be also marked as external methods for SymOntoClay DSL.
            Friends methods can be executed as parallel with such NPC devices.
            For example, NPC can aim to something and shoot as parallel. 
            And these host methods use NPC's hands. 
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.FriendsEndpointsAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="friendsEnpoints">Names of friends methods.</param>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.GameObjectSettings">
            <summary>
            Game object settings.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.GameObjectSettings.HostListener">
            <summary>
            Gets or sets host listener.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.GameObjectSettings.PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.HumanoidNPCSettings">
            <summary>
            Biped NPC (Non-Player Character) setting.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.HumanoidNPCSettings.LogicFile">
            <summary>
            Gets or sets file name of SymOntoClay logic file.
            The file describes active logic which will be executed on the NPC.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.HumanoidNPCSettings.PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IExecutorInMainThread.RunInMainThread(System.Action)">
            <summary>
            Executes handler in main thread context.
            </summary>
            <param name="function">Handler which should be executed in main thread context.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IExecutorInMainThread.RunInMainThread``1(System.Func{``0})">
            <summary>
            Executes handler in main thread context.
            </summary>
            <typeparam name="TResult">Type of result.</typeparam>
            <param name="function">Handler which should be executed in main thread context.</param>
            <returns>Result of the execution.</returns>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IGameObject">
            <summary>
            Represents each game object which is not NPC, Player or Place.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IHumanoidManualControlledObject">
            <summary>
            Repseresents manual controlled game object.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IHumanoidManualControlledObject.GameObject">
            <summary>
            Gets  manual controlled game object.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IHumanoidManualControlledObject.Devices">
            <summary>
            Gets list of devices of the NPC or Player which are using the game object.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IHumanoidNPC">
            <summary>
            Represents biped NPC (Non-Player Character)
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IHumanoidNPC.EnableLogging">
            <summary>
            Gets or sets value of enable logging.
            It alows enable or disable logging or remote connection for the NPC.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IHumanoidNPC.Die">
            <summary>
            Performs death of the NPC.
            All active processes will have been stopped.
            Another NPCs will percept the NPC as died.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IHumanoidNPC.BackpackStorage">
            <summary>
            Returns storage that represents a backpack.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IHumanoidNPC.AddToBackpack(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.UnityAsset.Core.IGameObject)">
            <summary>
            Adds a game object into backpack.
            </summary>
            <param name="logger">Logger.</param>
            <param name="obj">Instance of the game object.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IHumanoidNPC.RemoveFromBackpack(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.UnityAsset.Core.IGameObject)">
            <summary>
            Removes game object from backpack.
            </summary>
            <param name="logger">Logger.</param>
            <param name="obj">Instance of the game object.</param>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IHumanoidNPC.EngineContext">
            <summary>
            Gets engine context. Onkly for debugging and testing!
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IManualControlling">
            <summary>
            Represent aspect as manual controlling things by the NPC or Player.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IManualControlling.AddToManualControl(SymOntoClay.UnityAsset.Core.IGameObject,SymOntoClay.UnityAsset.Core.DeviceOfBiped)">
            <summary>
            Adds a game object into manual controlled area of the NPC.
            </summary>
            <param name="obj">Instance of the game object.</param>
            <param name="device">Describes biped device which will be using the game object.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IManualControlling.AddToManualControl(SymOntoClay.UnityAsset.Core.IGameObject,System.Collections.Generic.IList{SymOntoClay.UnityAsset.Core.DeviceOfBiped})">
            <summary>
            Adds a game object into manual controlled area of the NPC.
            </summary>
            <param name="obj">Instance of the game object.</param>
            <param name="devices">Describes list of biped devices which will be using the game object.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IManualControlling.RemoveFromManualControl(SymOntoClay.UnityAsset.Core.IGameObject)">
            <summary>
            Removes a game object from manual controlled area of an NPC.
            </summary>
            <param name="obj">Instance of the game object.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IManualControlling.GetManualControlledObjects">
            <summary>
            Gets list of manual controlled game objects by the NPC.
            </summary>
            <returns>List of manual controlled game objects.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.BaseManualControllingGameComponent.CreateProcess(SymOntoClay.Monitor.Common.IMonitorLogger,System.String,SymOntoClay.Core.ICommand,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.BaseStoredGameComponent.PublicFactsStorage">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.BaseStoredGameComponent.LoadFromSourceCode">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.BaseStoredGameComponent.OnDisposed">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectGameComponent.IsWaited">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectGameComponent.CanBeTakenBy(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectGameComponent.GetPosition(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.InstanceId">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.RemovePublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.PushSoundFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.PushSoundFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.AddCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.AddCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.RemoveCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.RemoveCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.EnableCategories">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.PublicFactsStorage">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.EndpointsRegistry">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.Logger">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.StandardFactsBuilder">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.GameObject.GameObjectImplementation.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidManualControlledObject.GameObject">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidManualControlledObject.Devices">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.PublicFactsStorage">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.LoadFromSourceCode">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.BeginStarting">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.IsWaited">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.CanBeTakenBy(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.GetPosition(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.EngineContext">
            <summary>
            Gets engine context. Onkly for debugging and testing!
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCGameComponent.OnDisposed">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.EnableLogging">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.AddToManualControl(SymOntoClay.UnityAsset.Core.IGameObject,SymOntoClay.UnityAsset.Core.DeviceOfBiped)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.AddToManualControl(SymOntoClay.UnityAsset.Core.IGameObject,System.Collections.Generic.IList{SymOntoClay.UnityAsset.Core.DeviceOfBiped})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RemoveFromManualControl(SymOntoClay.UnityAsset.Core.IGameObject)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.GetManualControlledObjects">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RemovePublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.InsertFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RemoveFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.PushSoundFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.PushSoundFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.AddCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.AddCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RemoveCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RemoveCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.EnableCategories">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.BackpackStorage">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.AddToBackpack(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.UnityAsset.Core.IGameObject)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.RemoveFromBackpack(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.UnityAsset.Core.IGameObject)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.EngineContext">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.StandardFactsBuilder">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.Die">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.HumanoidNPC.HumanoidNPCImplementation.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.InternalImplementations.IInternalManualControlledObject">
            <summary>
            Repseresents manual controlled game object.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.IInternalManualControlledObject.GameObject">
            <summary>
            Gets  manual controlled game object.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.IInternalManualControlledObject.Devices">
            <summary>
            Gets list of devices of the NPC or Player which are using the game object.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.InternalManualControlledObject.GameObject">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.InternalManualControlledObject.Devices">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceGameComponent.IsWaited">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceGameComponent.CanBeTakenBy(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceGameComponent.GetPosition(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.RemovePublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.PushSoundFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.PushSoundFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.AddCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.AddCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.RemoveCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.RemoveCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.EnableCategories">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.StandardFactsBuilder">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Place.PlaceImplementation.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerGameComponent.IsWaited">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerGameComponent.CanBeTakenBy(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerGameComponent.GetPosition(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.RemovePublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.PushSoundFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.PushSoundFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.AddCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.AddCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.RemoveCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.RemoveCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.EnableCategories">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.StandardFactsBuilder">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.InternalImplementations.Player.PlayerImlementation.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.WorldContext">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.Monitor">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.SetSettings(SymOntoClay.UnityAsset.Core.WorldSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.AddConvertor(SymOntoClay.UnityAsset.Core.IPlatformTypesConverter)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.EnableLogging">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.EnableRemoteConnection">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.Logger">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.GetHumanoidNPC(SymOntoClay.UnityAsset.Core.HumanoidNPCSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.GetPlayer(SymOntoClay.UnityAsset.Core.PlayerSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.GetGameObject(SymOntoClay.UnityAsset.Core.GameObjectSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.GetPlace(SymOntoClay.UnityAsset.Core.PlaceSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.InsertPublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.RemovePublicFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.PushSoundFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.PushSoundFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.StandardFactsBuilder">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.AddCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.AddCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.RemoveCategory(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.RemoveCategories(SymOntoClay.Monitor.Common.IMonitorLogger,System.Collections.Generic.List{System.String})">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.EnableCategories">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.Load(SymOntoClay.UnityAsset.Core.IRunTimeImageInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.Load(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.Load">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.Start">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.Stop">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.IsActive">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.CreateImage(SymOntoClay.UnityAsset.Core.RunTimeImageSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.CreateImage">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.CurrentImage">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.GetImages">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.DeleteImage(SymOntoClay.UnityAsset.Core.IRunTimeImageInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.DeleteImage(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.World.WorldCore.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.World.WorldCore.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.EnableLogging">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.PublicFactsStorage">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.CanBeTakenBy(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.GetPosition(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.LoadFromSourceCode">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.BeginStarting">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.IsWaited">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseGameComponent.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.BaseWorldCoreComponent.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.BaseWorldCoreComponent.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.Id">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.IdForFacts">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.Position">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.GetInstanceId(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.Internal.CodeModel.StrongIdentifierValue)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.IsVisible(SymOntoClay.Monitor.Common.IMonitorLogger,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.CanBeTaken(SymOntoClay.Monitor.Common.IMonitorLogger,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.GetPosition(SymOntoClay.Monitor.Common.IMonitorLogger,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.DistanceToAndPosition(SymOntoClay.Monitor.Common.IMonitorLogger,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.DistanceTo(SymOntoClay.Monitor.Common.IMonitorLogger,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.Specify(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.EntityConstraints[])">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.SpecifyOnce(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.EntityConstraints[])">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.SpecifyOnce(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IStorage)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.Resolve(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.ResolveIfNeeds(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.ConditionalEntityHostSupport.ConditionalEntityHostSupportComponent.GetNewEntity(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.TicksToSecondsMultiplicator">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.SecondsToTicksMultiplicator">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.TicksToMillisecondsMultiplicator">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.MillisecondsToTicksMultiplicator">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.CurrentTiks">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.Start">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.Stop">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.DateAndTime.DateTimeProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.KindOfEndpoint">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.OriginalName">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.NeedMainThread">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.Devices">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.SymOntoClay#UnityAsset#Core#IBaseEndpointInfo#Devices">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.SymOntoClay#UnityAsset#Core#IBaseEndpointInfo#Friends">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.Arguments">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.ToShortString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.ToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.SymOntoClay#CoreHelper#DebugHelpers#IObjectToShortString#PropertiesToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.ToBriefString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.ToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.BaseEndpointInfo.SymOntoClay#CoreHelper#DebugHelpers#IObjectToBriefString#PropertiesToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.Type">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.HasDefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.PositionNumber">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.KindOfParameter">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.IsSystemDefiend">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ParameterInfo">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ToShortString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.SymOntoClay#CoreHelper#DebugHelpers#IObjectToShortString#PropertiesToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ToBriefString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.ToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointArgumentInfo.SymOntoClay#CoreHelper#DebugHelpers#IObjectToBriefString#PropertiesToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointInfo.MethodInfo">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointInfo.Object">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointsProxyRegistryForDevices.GetEndpointsInfoListDirectly(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.EndpointsRegistry.GetEndpointsInfoListDirectly(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.MainThread.InvocableInMainThread.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.MainThread.InvocableInMainThreadObj`1.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.MainThread.InvokerInMainThread.RunInMainThread(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.MainThread.InvokerInMainThread.RunInMainThread``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.MainThread.InvokerInMainThread.SetInvocableObj(SymOntoClay.UnityAsset.Core.Internal.EndPoints.MainThread.IInvocableInMainThread)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.EndPointName">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.ProcessPlatformStart(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.ProcessPlatformCancelation(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.Devices">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.Friends">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.IsFriend(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.IProcessInfo)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.OnDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.ToHumanizedString(SymOntoClay.Core.DebugHelpers.DebugHelperOptions)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.ToHumanizedLabel(SymOntoClay.Core.DebugHelpers.DebugHelperOptions)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.ToHumanizedString(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.PlatformProcessInfo.ToLabel(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.Process">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.Exception">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.IsSuccessful">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.ToShortString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.ToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.SymOntoClay#CoreHelper#DebugHelpers#IObjectToShortString#PropertiesToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.ToBriefString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.ToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.EndPoints.ProcessCreatingResult.SymOntoClay#CoreHelper#DebugHelpers#IObjectToBriefString#PropertiesToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.HostSupport.HostSupportComponent.ConvertFromRelativeToAbsolute(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.Core.RelativeCoordinate)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.HostSupport.HostSupportComponent.GetCurrentAbsolutePosition(SymOntoClay.Monitor.Common.IMonitorLogger)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.HostSupport.HostSupportComponent.GetDirectionToPosition(SymOntoClay.Monitor.Common.IMonitorLogger,System.Numerics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.LogicQueryParsingAndCache.LogicQueryParseAndCache.GetLogicRuleOrFact(SymOntoClay.Monitor.Common.IMonitorLogger,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.BaseSoundReceiverComponent.InstanceId">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.BaseSoundReceiverComponent.Position">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.BaseSoundReceiverComponent.Threshold">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.BaseSoundReceiverComponent.CallBack(System.Double,System.Double,System.Numerics.Vector3,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundPublisherComponent.PushSoundFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundPublisherComponent.PushSoundFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundPublisherComponent.PushSpeechFact(System.Single,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundPublisherComponent.PushSpeechFact(System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundReceiverComponent.Position">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundReceiverComponent.Threshold">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundReceiverComponent.CallBack(System.Double,System.Double,System.Numerics.Vector3,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundReceiverComponent.CallBack(System.Double,System.Double,System.Numerics.Vector3,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundReceiverComponent.GetDirectionToPosition(System.Numerics.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.SoundPerception.SoundReceiverComponent.OnDisposed">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.Threads.ThreadsCoreComponent.SymOntoClay#Core#Internal#Threads#IActivePeriodicObjectCommonContext#IsNeedWating">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.Threads.ThreadsCoreComponent.SymOntoClay#Core#Internal#Threads#IActivePeriodicObjectCommonContext#WaitEvent">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ToShortString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.SymOntoClay#CoreHelper#DebugHelpers#IObjectToShortString#PropertiesToShortString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ToBriefString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.ToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.BasePlatformTypesConverter.SymOntoClay#CoreHelper#DebugHelpers#IObjectToBriefString#PropertiesToBriefString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.EntityAndStrongIdentifierValueConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.EntityAndStrongIdentifierValueConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.EntityAndStrongIdentifierValueConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.EntityAndStrongIdentifierValueConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.EntityAndStrongIdentifierValueConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.EntityAndStrongIdentifierValueConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.FloatAndNumberValueConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.FloatAndNumberValueConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.FloatAndNumberValueConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.FloatAndNumberValueConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.FloatAndNumberValueConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.FloatAndNumberValueConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.NavTargetAndStrongIdentifierValueConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.NavTargetAndStrongIdentifierValueConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.NavTargetAndStrongIdentifierValueConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.NavTargetAndStrongIdentifierValueConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.NavTargetAndStrongIdentifierValueConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.NavTargetAndStrongIdentifierValueConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndIEntityConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndIEntityConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndIEntityConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndIEntityConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndIEntityConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndIEntityConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndStrongIdentifierValueConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndStrongIdentifierValueConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndStrongIdentifierValueConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndStrongIdentifierValueConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndStrongIdentifierValueConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndStrongIdentifierValueConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndWayPointValueConverter.PlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndWayPointValueConverter.CoreType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndWayPointValueConverter.CanConvertToPlatformType">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndWayPointValueConverter.CanConvertToCoreType">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndWayPointValueConverter.ConvertToCoreType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.DefaultConverters.Vector3AndWayPointValueConverter.ConvertToPlatformType(SymOntoClay.Monitor.Common.IMonitorLogger,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.PlatformTypesConvertersRegistry.AddConvertor(SymOntoClay.Monitor.Common.IMonitorLogger,SymOntoClay.UnityAsset.Core.IPlatformTypesConverter)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.PlatformTypesConvertersRegistry.CanConvert(SymOntoClay.Monitor.Common.IMonitorLogger,System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.TypesConverters.PlatformTypesConvertersRegistry.Convert(SymOntoClay.Monitor.Common.IMonitorLogger,System.Type,System.Type,System.Object,SymOntoClay.Core.Internal.IEngineContext,SymOntoClay.Core.ILocalCodeExecutionContext)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.Vision.VisionComponent.OnDisposed">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#Motitor">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.WorldContext.InvokerInMainThread">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SoundBus">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreContext#AddWorldComponent(SymOntoClay.UnityAsset.Core.Internal.IWorldCoreComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#AddGameComponent(SymOntoClay.UnityAsset.Core.Internal.IGameComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#AddPublicFactsStorage(SymOntoClay.UnityAsset.Core.Internal.IGameComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#RemoveGameComponent(SymOntoClay.UnityAsset.Core.Internal.IGameComponent)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#CanBeTakenBy(System.Int32,SymOntoClay.Core.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#GetPosition(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#AvailableInstanceIdList">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#GetPublicFactsStorageByInstanceId(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#GetIdForFactsByInstanceId(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.SymOntoClay#UnityAsset#Core#Internal#IWorldCoreGameComponentContext#GetInstanceIdByIdForFacts(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.Internal.WorldContext.IsDisposed">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.Internal.WorldContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IPlace">
            <summary>
            Represents some place of a game world. It can be both a point and an area.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IPlayer">
            <summary>
            Represents Player.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IRunTimeImageInfo">
            <summary>
            Represents runtime image of executed code.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IRunTimeImageInfo.Id">
            <summary>
            Gets image id.
            It should be Universally Unique Identifier (UUID).
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IRunTimeImageInfo.CreationTime">
            <summary>
            Gets creation time.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IRunTimeImageInfo.Description">
            <summary>
            Gets user defined description of the image.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IRunTimeImageInfo.ParentId">
            <summary>
            Gets parent image id or <c>null</c> if the image was created directly from source code.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.ISoundReceiver.Threshold">
            <summary>
            Gets threshold of audibility in decibels.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildSayFactString(System.String,System.String)">
            <summary>
            Builds fact that the NPC says something.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <param name="factStr">Fact which is said by the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildSayFactInstance(System.String,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <summary>
            Builds fact that the NPC says something.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <param name="fact">Fact which is said by the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildSoundFactString(System.Double,System.Single,System.String)">
            <summary>
            Builds fact which represents listening to a sound.
            </summary>
            <param name="distance">Distance to sound source.</param>
            <param name="directionToPosition">Direction to to sound source.</param>
            <param name="factStr">Fact which represents a sound.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildSoundFactInstance(System.Double,System.Single,SymOntoClay.Core.Internal.CodeModel.RuleInstance)">
            <summary>
            Builds fact which represents listening to a sound.
            </summary>
            <param name="distance">Distance to sound source.</param>
            <param name="directionToPosition">Direction to to sound source.</param>
            <param name="fact">Fact which represents a sound.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildAliveFactString(System.String)">
            <summary>
            Builds fact that the NPC is alive.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildAliveFactInstance(System.String)">
            <summary>
            Builds fact that the NPC is alive.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildDeadFactString(System.String)">
            <summary>
            Builds fact that the NPC is dead.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildDeadFactInstance(System.String)">
            <summary>
            Builds fact that the NPC is dead.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildStopFactString(System.String)">
            <summary>
            Builds fact that the NPC has stopped itself.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildStopFactInstance(System.String)">
            <summary>
            Builds fact that the NPC has stopped itself.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildWalkFactString(System.String)">
            <summary>
            Builds fact that the NPC has started walking.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildWalkFactInstance(System.String)">
            <summary>
            Builds fact that the NPC has started walking.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildWalkSoundFactString">
            <summary>
            Builds fact which represents sound of someone's walking.
            </summary>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildWalkSoundFactInstance">
            <summary>
            Builds fact which represents sound of someone's walking.
            </summary>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildRunFactString(System.String)">
            <summary>
            Builds fact that the NPC has started running.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildRunFactInstance(System.String)">
            <summary>
            Builds fact that the NPC has started running.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildRunSoundFactString">
            <summary>
            Builds fact which represents sound of someone's running.
            </summary>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildRunSoundFactInstance">
            <summary>
            Builds fact which represents sound of someone's running.
            </summary>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildHoldFactString(System.String,System.String)">
            <summary>
            Builds fact that the NPC holds something in his hands.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <param name="heldThingId">Id of held thing.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildHoldFactInstance(System.String,System.String)">
            <summary>
            Builds fact that the NPC holds something in his hands.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <param name="heldThingId">Id of held thing.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildShootFactString(System.String)">
            <summary>
            Builds fact that the NPC shoots.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildShootFactInstance(System.String)">
            <summary>
            Builds fact that the NPC shoots.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildShootSoundFactString">
            <summary>
            Builds fact which represents sound of someone's shooting.
            </summary>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildShootSoundFactInstance">
            <summary>
            Builds fact which represents sound of someone's shooting.
            </summary>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildReadyForShootFactString(System.String)">
            <summary>
            Builds fact that the NPC is ready for shooting.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>String that represents built fact.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IStandardFactsBuilder.BuildReadyForShootFactInstance(System.String)">
            <summary>
            Builds fact that the NPC is ready for shooting.
            </summary>
            <param name="selfId">Id of the NPC.</param>
            <returns>Instance of built fact.</returns>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.IWorld">
            <summary>
            Represents core of a game world.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.SetSettings(SymOntoClay.UnityAsset.Core.WorldSettings)">
            <summary>
            Sets general settings into the instance.
            This method can be run just once in the start of game or application.
            You can not use the framework before calling this method.
            Calling other methods before this will provoke exceptions.
            You can not call the method after disposing the instance.
            </summary>
            <param name="settings">Instance of settings.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.AddConvertor(SymOntoClay.UnityAsset.Core.IPlatformTypesConverter)">
            <summary>
            Adds platform type convertor manually.
            You should add platform type convertor manually using Unity3d, bacause automatic loading convertors provoces exception on Unity3d.
            </summary>
            <param name="convertor">An instance of platform type convertor.</param>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IWorld.EnableLogging">
            <summary>
            Gets or sets value of enable logging.
            It alows enable or disable logging or remote connection for whole components synchronously.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IWorld.EnableRemoteConnection">
            <summary>
            Gets or sets value of enable remote connection.
            It alows enable or disable remote connection for whole components synchronously.
            It doesn't touch local logging.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.GetHumanoidNPC(SymOntoClay.UnityAsset.Core.HumanoidNPCSettings)">
            <summary>
            Registers an instance of NPC by passed settings.
            Returned agent provides communication between game level in Unity3D and logical core.
            </summary>
            <param name="settings">Instance of settings.</param>
            <returns>Instance of agent.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.GetPlayer(SymOntoClay.UnityAsset.Core.PlayerSettings)">
            <summary>
            Registers an instance of Player by passed settings.
            Returned agent provides communication between game level in Unity3D and logical core.
            </summary>
            <param name="settings">Instance of settings.</param>
            <returns>Instance of agent.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.GetGameObject(SymOntoClay.UnityAsset.Core.GameObjectSettings)">
            <summary>
            Registers an instance of game object by passed settings.
            Returned agent provides communication between game level in Unity3D and logical core.
            </summary>
            <param name="settings">Instance of settings.</param>
            <returns>Instance of agent.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.GetPlace(SymOntoClay.UnityAsset.Core.PlaceSettings)">
            <summary>
            Registers an instance of place by passed settings.
            Returned agent provides communication between game level in Unity3D and logical core.
            </summary>
            <param name="settings">Instance of settings.</param>
            <returns>Instance of agent.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.Load(SymOntoClay.UnityAsset.Core.IRunTimeImageInfo)">
            <summary>
            Loads image by image info.
            </summary>
            <param name="imageInfo">Instance of image info.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.Load(System.String)">
            <summary>
            Loads image by Id.
            </summary>
            <param name="id">Image id.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.Load">
            <summary>
            Loads last image.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.Start">
            <summary>
            Starts execution loaded image.
            If there was not loading image default image will be created from source code.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.Stop">
            <summary>
            Stops execution.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IWorld.IsActive">
            <summary>
            Returns <c>true</c> if execution was started, otherwise returns <c>false</c>.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.CreateImage(SymOntoClay.UnityAsset.Core.RunTimeImageSettings)">
            <summary>
            Creates (saves) image of execured code by settings.
            </summary>
            <param name="settings">Setting of created (saved) image.</param>
            <returns>Instance of image info about created (saved) image.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.CreateImage">
            <summary>
            Creates (saves) image of execured code.
            </summary>
            <returns>Instance of image info about created (saved) image.</returns>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IWorld.CurrentImage">
            <summary>
            Returns image info about last created (saved) image.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.GetImages">
            <summary>
            Returns list of all available image info.
            </summary>
            <returns>Instnce of list of all available image info.</returns>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.DeleteImage(SymOntoClay.UnityAsset.Core.IRunTimeImageInfo)">
            <summary>
            Deletes image by image info.
            </summary>
            <param name="imageInfo">Instance of image info.</param>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.IWorld.DeleteImage(System.String)">
            <summary>
            Deletes image by Id.
            </summary>
            <param name="id">Image id.</param>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.IWorld.WorldContext">
            <summary>
            Gets world context. Onkly for debugging and testing!
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.KindOfEndpointParam">
            <summary>
            Describes a tip about conversion between C# and SymOntoclay DSL types.
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.KindOfEndpointParam.Unknown">
            <summary>
            The type is unknown.
            </summary>
        </member>
        <member name="F:SymOntoClay.UnityAsset.Core.KindOfEndpointParam.Position">
            <summary>
            The type is absolute position.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.PlaceSettings">
            <summary>
            Place settings.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.PlayerSettings">
            <summary>
            Player settings.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.RunTimeImageSettings">
            <summary>
            Settings for creation (saving) runtime image of executed code.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.RunTimeImageSettings.Description">
            <summary>
            Gets or sets user defined description of the image.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.RunTimeImageSettings.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.RunTimeImageSettings.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.RunTimeImageSettings.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.VisibleItem.InstanceId">
            <summary>
            InstanceId in Unity Engine.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.VisibleItem.Position">
            <summary>
            Position of this GameObject in Unity Engine.
            This position will be used for prevention chitering AI.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.VisibleItem.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.VisibleItem.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.VisibleItem.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.WorldFactory.WorldInstance">
            <summary>
            Gets instance of game world.
            </summary>
        </member>
        <member name="T:SymOntoClay.UnityAsset.Core.WorldSettings">
            <summary>
            General settings of a game world.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.WorldSettings.LibsDirs">
            <summary>
            Gets or sets list of file paths for describing places for searching shared modules.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.WorldSettings.ImagesRootDir">
            <summary>
            Gets or sets root dir for saving and loading images of executed code.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.WorldSettings.DictionariesDirs">
            <summary>
            Gets or sets list of file paths for describing places searching dictionaries of translation text to facts.
            </summary>
        </member>
        <member name="P:SymOntoClay.UnityAsset.Core.WorldSettings.HostFile">
            <summary>
            Gets or sets file name of SymOntoClay host file.
            The file describes facts which are visible for other NPCs or can be recognized in some way by player.
            </summary>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.WorldSettings.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.WorldSettings.SymOntoClay#CoreHelper#DebugHelpers#IObjectToString#PropertiesToString(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:SymOntoClay.UnityAsset.Core.WorldSettings.ToString(System.UInt32)">
            <inheritdoc/>
        </member>
    </members>
</doc>
